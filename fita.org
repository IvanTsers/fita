#+begin_export latex
\maketitle
\section{Introduction}
The search of genetic markers in whole genome sequences (as
implemented in \texttt{fur}~\cite{hau21:fur}) requires finding a set
of closely realted genomes that make up a \textit{phylogenetic
  neighborhood}. It may include hundreds of genomes. The Neighbors
package~\cite{hau23:nei} allows to discover such phylogenetic
neighborhoods through automated querying of the NCBI taxonomy. The
querying yields a table of taxonomic identifiers (taxids) and
references to genomic sequences associated with them. The accessions
of this table are separated into \textbf{targets} and
\textbf{neighbors}. However, a taxonomic tree of given taxids may not
reflect the real phylogenetic relations between the corresponding
genomes ~\cite{hau23:nei}. Therefore, it is reasonable to check the
output of Neighbors through \textit{de novo} reconstruction of the
phylogenetic tree followed by finding the target clade in
it. Effective tools for large-sample phylogenetic analysis are present
(e.g. \texttt{phylonium} ~\cite{kloe19:phy}), but there are no tools
for automated separation of targets from neighbors.\par

The given document introduces \texttt{fita}, a \texttt{Go} CLI program
for automated search of the target clade in a phylogenetic tree. The
program takes a \texttt{Newick} tree as the input, and returns a
\texttt{Newick} subtree containing the targets.

\section{Approach}
We assume that target genomes are more similar to each other than to
any of neighbor genomes. In other words, the targets are expected to
form a clade on a phylogenetic tree. Let's consider a phylogenetic
neighborhood of 86 random \textit{E. coli} O157:H7 genomes (a subset
of the neighborhood predicted by \texttt{neighbors} for \texttt{taxid
  83334} ~\cite{hau23:nei}). Twenty-seven and 59 of the genomes were
marked as \textbf{targets} and \textbf{neighbors}, respectively. The
evolutionary distances between these genomes were estimated using
\texttt{phylonium}, and a phylogenetic tree for them was built
(Figure~\ref{fig:cladeExample}).

\begin{figure}[H]
  \begin{center}
    \includegraphics{fig/cladeExample}
    \end{center}
  \caption{The example phylogenetic tree reconstructed for the
    \textit{E. coli} O157:H7 phylogenetic neighborhood predicted with
    the Neighbors package. Target leaves are marked with grey
    circles. The arrows indicate the lowest common ancestor of every
    target (black) or the majority of targets
    (grey).}\label{fig:cladeExample}
\end{figure}

The clade rooted on the node indicated by black arrow contains 77
leaves and includes all the tagrets predicted with
\texttt{neighbors}. If we accept it as a target clade, we also have to
classify 50 more leaves as new targets in addition to the original 27
ones we searched for. Some targets can indeed be misclassified by
\texttt{neighbors}~\cite{hau23:nei}, since the program relies on the
original NCBI Taxonomy tree. However, in our case we misclassify
almost all considered genomes.\par

To minimize the number of misclassified genomes, we may search for the
LCA of the \textit{majority} of the targets instead of LCA of
\texttt{every} target. For example, the clade rooted on the node
indicated by grey arrow contains 24 targets among its 37 leaves. In
this case, most of the neighbors and all obviously misclassified
targets can be removed from the tree.\par

In the considered example, we could easily see the target clade. This
intuitive analysis has to be formalized to enable processing of
\texttt{Newick} trees. I suggest the following workflow:

\begin{enumerate}[itemsep = -2pt]
\item start with the root of the input tree;
\item pick the child nodes;
\item select the child that roots a subtree containing more targets
  (predicted by \texttt{neighbors}) than the subtree rooted by the
  other child;
\item repeat the previous 2 steps until we reject a clade consisting
  only of the targets;
\item return the tree rooted on the parent of the last processed pair
  of nodes.
\end{enumerate}

We remove non-target leaves from the tree as we follow the listed
steps. We eventually reach the common ancestor of the majority of
targets and some of their closest neighbors. The resulting tree is
much smaller than the original one, since almost all neighbors are
removed from it (Figure~\ref{fig:cladeReduced}).

\begin{figure}[H]
  \begin{center}
    \includegraphics{fig/cladeReduced}
    \end{center}
  \caption{The phylogenetic tree of \textit{E. coli} O157:H7
    phylogenetic neighborhood after removal of most of the non-target
    leaves. The target leaves are marked with grey circles. The white
    arrow marks the 'core target clade'---the clade which will remain
    after an additional round of removal of the misclassified
    genomes.}\label{fig:cladeReduced}
\end{figure}

The tree in the Figure~\ref{fig:cladeReduced} is much easier to
inspect compared to the tree in the Figure ~\ref{fig:cladeExample}. It
can be seen that the tree contains a whole clade of neighbors (the
non-target genomes CP038386, CP003109, CP001846) and an orphan genome
CP033605. These 4 genomes may be desirable for removal from the
tree. They can be removed manually (e.g. with help of \texttt{land}
and \texttt{pickle} programs~\cite{hau23:nei}). We can also utilize
the significant difference in the branch lengths to filter out the
non-targets automatically. The branches are mostly longer outside the
'core target clade' (indicated by white arrow) which does not include
the orphan and the neighbor three-leaf clade.\\\\

The program \texttt{fita} (\textbf{fi}nd the \textbf{ta}rgets) is a
two-step implementation of the described approach. First, it finds the
lowest common ancestor (LCA) of the majority of
\texttt{neighbors}-predicted targets. Second, the remaining neighbors
and misclassified targets are filtered out from the subtree rooted on
the found LCA. The filter is based on the difference in branch lengths
within the clade rooted on the LCA found in the first step. The second
step is optional so the user can omit it in case he or she desires to
analyze the tree manually after the first step.

\section{Implementation}
The program \texttt{fita} is written in \texttt{Go}. It has the main
function logic and additional hooks for auxillary variables,
functions, and imports.
#+end_export

#+begin_src go <<fita.go>>=
  package main

  import (
	  //<<Imports>>
  )
  //<<Auxillary variables>>
  //<<Functions>>
  func main() {
	  //<<Main function>>
  }
#+end_src

#+begin_export latex
In the main function we set the usage, declare and parse the options,
read the input files, find the lowest common ancestor (LCA) of the
majority of targets, remove long branches from the target clade (if
the \texttt{-c} flag is used), and print the results.
#+end_export

#+begin_src go <<Main function>>=
  //<<Set usage>>
  //<<Declare and parse options>>
  //<<Read the input>>
  //<<Find the LCA of the majority of targets>>
  if *optC {
	  //<<Remove the long branches>>
  }
#+end_src

#+begin_export latex
The usage consists of the actual usage message, an explanation of the
purpose of \texttt{fita}, and an example command.
#+end_export

#+begin_src go <<Set usage>>=
  u := "fita [options] [tree file] [list of target genome names]"
  p := "Find the target clade subtree."
  e := "fita -verbose -c tree.nwk targets.txt"
  clio.Usage(u, p, e)
#+end_src

#+begin_export latex
We import \texttt{clio}.
#+end_export

#+begin_src go <<Imports>>=
  "github.com/evolbioinf/clio"
#+end_src

#+begin_export latex
The user can opt to use complete mode (\texttt{-c}) and verbose mode
(\texttt{-verbose}). By default, the program only finds the clade
rooted on the lowest common ancestor (LCA) of the majority of targets
and prints the found clade out. In complete mode, the program proceeds
with removal of the remaining non-targets and misclassified targets
(if any). In verbose mode, all intermediate results and summary of
each step are printed out (thus the output may be unsuitable for
piping to other programs).
#+end_export

#+begin_src go <<Declare and parse options>>=
  var optC = flag.Bool("c", false, "complete mode" +
	  "\n(remove most of the neighbors and filter out" +
	  "\nthe clades containing branches longer than" +
	  "\nthe automatically calculated threshold)")
  var optVerbose = flag.Bool("verbose", false, "verbose mode" +
	  "\n(the output may be incompatible with piping)")
  flag.Parse()
#+end_src

#+begin_export latex
  We import \texttt{flag}.
#+end_export

#+begin_src go <<Imports>>=
  "flag"
#+end_src

#+begin_export latex
The remaining tokens on the command line are interpreted as the names
of input files: the first one is a \texttt{Newick} tree, the second
one is a list of the target names predicted by \texttt{neighbors}. We
read a \texttt{Newick} tree from a file using a scanner from the
\texttt{nwk} package.
#+end_export

#+begin_src go <<Read the input>>=
    // Read the tree
  r := newOsReader(0)
  scNwk := nwk.NewScanner(r)
  scNwk.Scan()
    // Read the target list
  r = newOsReader(1)
  var targetList []string
  scStr := bufio.NewScanner(r)
  for scStr.Scan() {
	  targetList = append(targetList, scStr.Text())
  }
#+end_src

#+begin_export latex
We import \texttt{nwk} and \texttt{bufio}.
#+end_export

#+begin_src go <<Imports>>=
  "github.com/evolbioinf/nwk"
  "bufio"
#+end_src

#+begin_export latex
The function \texttt{newOsReader} creates an \texttt{io.Reader} from a
file specified by the number of the token from the command line.
#+end_export

#+begin_src go <<Functions>>=
  func newOsReader(x int) io.Reader {
	  var err error
	  var r io.Reader
	  r, err = os.Open(flag.Args()[x])
	  if err != nil {
		  panic(err)
	  }
	  return r
  }
#+end_src

#+begin_export latex
We import \texttt{io} and \texttt{os}.
#+end_export

#+begin_src go <<Imports>>=
  "io"
  "os"
#+end_src

#+begin_export latex
The search of the LCA of the majority of targets and the removal of
the misclassified leaves are based on \textbf{voting} in which one of
sibling clades is selected. The voting is iterative and it starts with
the clades rooted on children of the input tree root. If an item (a
node or a leaf) of the clade meets a certain criterion, it adds one
vote to the vote pool of this clade. After the winning clade is
determined, we perform another voting round with the children of its
root. We do this until a losing clade (that has less votes) contains
only the target leaves or has a branch of a threshold length.\par

We declare \texttt{losLeaves} and \texttt{losLeaves}
to keep the total number of leaves and votes in the losing clade. We
also declare \texttt{winVotes}, \texttt{winLeaves}, and
\texttt{rounds} (number of voting rounds passed), which we use to
print a summary.
#+end_export

#+begin_src go <<Auxillary variables>>=
  var losLeaves int = 1
  var losVotes int = 0
  var winVotes int = 0
  var winLeaves []string
  var round int = 1
#+end_src

#+begin_export latex
We search the LCA of the majority of targets in the first voting. In
this voting, leaves with labels matching target genome names are
qualified as voters.
#+end_export

#+begin_src go <<Find the LCA of the majority of targets>>=
  //<<Voting initialization (leaves)>>
  //<<The voting (leaves)>>
  //<<Print the target clade (leaves)>>
#+end_src

#+begin_export latex
We initialize the voting of leaves with the declaration of 5
variables:
\begin{itemize}[itemsep = -2pt]
\item \texttt{cRoot} to track the current root node;
\item \texttt{rChild} for the right child of the current root;
\item \texttt{lChild} for the left child of the current root;
\item \texttt{rLeafLabels} to keep leaf labels of the clade rooted on
  \texttt{rChild};
\item \texttt{lLeafLabels} to keep leaf labels of the clade rooted on
  \texttt{lChild}.
\end{itemize}
#+end_export

#+begin_src go <<Voting initialization (leaves)>>=
  var cRoot *nwk.Node = scNwk.Tree()
  var rChild *nwk.Node = cRoot.Child
  var lChild *nwk.Node = rChild.Sib
  var rLeafLabels, lLeafLabels []string
#+end_src

#+begin_export latex
The voting itself consists of the following steps:
\begin{enumerate}[itemsep = -2pt]
\item get labels of leaves of a subtree;
\item count matches between the labels and names of the target
  genomes;
\item choose the winning clade.
\end{enumerate}

The voting stops when the number of votes for the losing clade is
equal to the number of its leaves.  If \texttt{fita} runs in verbose
mode (\texttt{-verbose}), the summary on the intermediate results is
printed out.
#+end_export

#+begin_src go <<The voting (leaves)>>=
  if *optVerbose {
	  fmt.Printf("# Step 1: find the target clade... #\n\n")
  }

  for losVotes != losLeaves {
	  //<<Reset the previous results (leaves)>>
	  //<<Get leaf labels>>
	  //<<Count votes (leaves)>>
	  //<<Choose winner (leaves)>>
	  if *optVerbose {
		  //<<Print the results of the round (leaves)>>
	  }
	  round++
	  cRoot = cRoot.Parent
  }
#+end_src

#+begin_export latex
In the beginning of each round we set numbers of the votes to zero and
reset slices of the labels.
#+end_export

#+begin_src go <<Reset the previous results (leaves)>>=
  rVotes, lVotes = 0, 0
  rLeafLabels, lLeafLabels = nil, nil
#+end_src

#+begin_export latex
We apply the function \texttt{getLeafLabels} to the children of the
current root to get slices of the leaf labels. If a child is a
terminal node, we simply get its label without calling the function.
#+end_export

#+begin_src go <<Get leaf labels>>=
    // the right child
  if rChild.Child == nil {
	  rLeafLabels = append(rLeafLabels, rChild.Label)
  } else {
	  rLeafLabels = getLeafLabels(rChild.Child, rLeafLabels)
  }
    // the left child
  if lChild.Child == nil {
	  lLeafLabels = append(lLeafLabels, lChild.Label)
  } else {
	  lLeafLabels = getLeafLabels(lChild.Child, lLeafLabels)
  }
#+end_src

#+begin_export latex
The function \texttt{getLeafLabels} traverses the tree recursively and
returns the labels of the treminal nodes.
#+end_export

#+begin_src go <<Functions>>=
  func getLeafLabels(n *nwk.Node, l []string) []string {
	  if n == nil {return l}
	  if n.Child == nil {
		  l = append(l, n.Label)
	  }
	  l = getLeafLabels(n.Child, l)
	  l = getLeafLabels(n.Sib, l)
	  return l
  }
#+end_src

#+begin_export latex
We count votes of the right and left clades.
#+end_export

#+begin_src go <<Count votes (leaves)>>=
  rVotes = countVotes(rLeafLabels, targetList)
  lVotes = countVotes(lLeafLabels, targetList)
#+end_src

#+begin_export latex
The function \texttt{countVotes} accepts two arguments. The first one
is a slice of tree items that can be either leaf labels
(\texttt{string}) or branch lengths (\texttt{float64}). The second
argument is a criterion to qualify the items as voters. It may be
either a list of targets (\texttt{[]string}) or a branch length
threshold (\texttt{float64}).
#+end_export

#+begin_src go <<Functions>>=
  func countVotes(arg1 interface{}, arg2 interface{}) int {
	  votes := 0
	  switch items := arg1.(type) {
	  case []string:
		  //<<Target leaves vote>>
	  case []float64:
		  //<<Short branches vote>>
	  default: 
		  panic("countVotes() failed: unexpected input")
	  }
	  return votes
  }
#+end_src

#+begin_export latex
The number of votes is equal to the number of matches between the leaf
labels and the names of the target genomes.
#+end_export

#+begin_src go <<Target leaves vote>>=
  crit := arg2.([]string)
  for _, leaf := range items {
	  if isInString(crit, leaf){
		  votes++
	  }
  }
#+end_src

#+begin_export latex
We declare a function for checking if a string is present in a slice
of strings.
#+end_export

#+begin_src go <<Functions>>=
  func isInString(slice []string, value string) bool {
	  for _, x := range slice {
		  if x == value {
			  return true
		  }
	  }
	  return false
  }
#+end_src

#+begin_export latex
The number of votes is equal to the number of branches that are
shorter than the threshold.
#+end_export

#+begin_src go <<Short branches vote>>=
  crit := arg2.(float64)
  for _, length := range items {
	  if length < crit {
		  votes++
	  }	
  }
#+end_src

#+begin_export latex
The initial value of both \texttt{rVotes} and \texttt{lVotes} is zero.
#+end_export

#+begin_src go <<Auxillary variables>>=
  var rVotes, lVotes int = 0, 0
#+end_src

#+begin_export latex
We choose the winning clade.
#+end_export

#+begin_src go <<Choose winner (leaves)>>=
  if rVotes > lVotes {
	  cRoot = rChild
	  winVotes = rVotes
	  winLeaves = rLeafLabels
	  rChild = cRoot.Child
	  lChild = rChild.Sib
	  losVotes = lVotes
	  losLeaves = len(lLeafLabels)
  } else {
	  cRoot = lChild
	  winVotes = lVotes
	  winLeaves = lLeafLabels
	  rChild = cRoot.Child
	  lChild = rChild.Sib
	  losVotes = rVotes
	  losLeaves = len(rLeafLabels)
  }
#+end_src

#+begin_export latex
We print the results of the current voting round.
#+end_export

#+begin_src go <<Print the results of the round (leaves)>>=
  fmt.Printf(
	  "round: %d\twinner: %s\tvotes: %d\tleaves: %d\n",
	  round, cRoot.Label, winVotes, len(winLeaves))
#+end_src

#+begin_export latex
When the iterative voting is over, we print out the resulting tree by
default. If the \texttt{-c} flag is used, we skip the printing. To
format the output tree properly, we remove the first character (a
comma) and append a parenthesis and a semicolon to the beginning and
to the end of the string, respectively. If the \texttt{-verbose} flag
is used, we print out the summary.
#+end_export

#+begin_src go <<Print the target clade (leaves)>>=
  if *optVerbose {
	  //<<Print the voting results (leaves)>>
  }
  if !*optC {
	  fmt.Printf("(%s;\n", cRoot.String()[1:])
  }
#+end_src

#+begin_export latex
We import \texttt{fmt}.
#+end_export

#+begin_src go <<Imports>>=
  "fmt"
#+end_src

#+begin_export latex
We inform the user that the voting is finished.
#+end_export

#+begin_src go <<Print the voting results (leaves)>>=
  fmt.Printf(
	  "final:\t\tone of the clades consists of the targets\n")
  fmt.Printf(
	  "final:\t\treturn to the parent node (%s)\n" +
	  "\nThe found target clade has %d of %d targets.\n",
	  cRoot.Label, winVotes, len(targetList))
  fmt.Printf("\nThe target clade:\n\n%s;\n", cRoot.String()[1:])	
#+end_src

#+begin_export latex
If \texttt{fita} runs in the complete mode, we proceed with automated
removal of long branches. This operation is also based on the
iterative voting, but this time voters are branches which are not
longer than a threshold. The latter is calculated prior to the voting.
#+end_export

#+begin_src go <<Remove the long branches>>=
  //<<Voting initialization (branches)>>
  //<<The voting (branches)>>
  //<<Print the target clade (branches)>>
#+end_src

#+begin_export latex
We extract lengths of all branches from the tree rooted on
\texttt{cRoot}. At this point, the \texttt{cRoot} is the LCA for the
majority of targets. We use these lengths to calculate the length
threshold. We also reset \texttt{round}.
#+end_export

#+begin_src go <<Voting initialization (branches)>>=
  var allLengths []float64
  allLengths = getBranchLengths(cRoot, allLengths)
  round = 1
  //<<Calculate the branch length threshold>>
#+end_src

#+begin_export latex
The recursive function \texttt{getBranchLengths} traverses the input
tree rooted on the node \texttt{n} and returns a slice of all branch
lengths.
#+end_export

#+begin_src go <<Functions>>=
  func getBranchLengths(n *nwk.Node, l []float64) []float64 {
	  if n == nil {return l}
	  if n.HasLength {
		  l = append(l, n.Length)
	  }
	  l = getBranchLengths(n.Child, l)
	  l = getBranchLengths(n.Sib, l)
	  return l
  }
#+end_src

#+begin_export latex
We expect the branches of the 'core target clade' to be noticeably
shorter compared to misclassified branches
(Figure~\ref{fig:cladeReduced}). To reveal the the boundary between
the shorter and the longer branches, we cluster their lengths.
#+end_export

#+begin_src go <<Calculate the branch length threshold>>=
  //<<Branch length clustering>>
  //<<Retrieve the threshold>>
#+end_src

#+begin_export latex
We use the DBSCAN (Density-Based Algorithm for Discovering Clusters in
Large Spatial Databases with Noise~\cite{est96:clu}) to cluster all
branch lengths.
#+end_export

#+begin_src go <<Branch length clustering>>=
  //<<Prepare the data>>
  //<<DBSCAN clustering>>
#+end_src

#+begin_export latex
The DBSCAN is sensitive to the topological structure of the input
data. We want big to be clustered with big, and small with small, so
we sort the input data before the clustering. Since most DBSCAN
implementations work with two-dimensional coordinates, we will arrange
our input into a two-column table, where the first column is filled
with zeroes, and the second column is filled with the branch
lengths. In other words, we create an imaginary projection of branch
lengths on the Y-axis.
#+end_export

#+begin_src go <<Prepare the data>>=
  sort.Float64s(allLengths)
  nVal := len(allLengths)
  data := make([][]float64, nVal)
    // create an empty table
  for i := range data {
	  data[i] = make([]float64, 2)
  }
    // fill the table with values
  for i, v := range allLengths {
	  data[i][0] = 0
	  data[i][1] = v
  }
#+end_src

#+begin_export latex
We import \texttt{sort}.
#+end_export

#+begin_src go <<Imports>>=
  "sort"
#+end_src

#+begin_export latex
We use the \texttt{clusters} package~\cite{clusters} to perform the
DBSCAN. The function \linebreak\texttt{clusters.DBSCAN} requires four
parameters:
\begin{enumerate}[itemsep = -2pt]
  \item \textbf{minpts} which is minimal number of points in a
    cluster;
  \item $\epsilon$ (\textbf{eps}) which is neighborhood radius around
    a point;
  \item number of workers;
  \item distance calculation method.
\end{enumerate}
#+end_export

#+begin_src go <<DBSCAN clustering>>=
  //<<Define DBSCAN parameters>>
  //<<Create a clusterer>>
  //<<Find clusters>>
#+end_src

#+begin_export latex
Let \textbf{minpts} be 1 to allow clusters containing a single point.
Let \textbf{eps} be the average increase in node length, i.e.
\[
 \epsilon=\frac{\text{Max length}-\text{Min length}}{\text{Number of
     nodes}}
\]
One worker should be enough to cluster less than a thousand numbers.
We will use the Euclidean Distance function
(\texttt{clusters.EuclideanDistance}). We print \texttt{eps}
if the \texttt{-c} flag is used.
#+end_export

#+begin_src go <<Define DBSCAN parameters>>=
  var minpts int = 1
  var eps float64 = (
	  data[nVal-1][1] - data[0][1]) / float64(nVal)
  if *optVerbose {
	  fmt.Printf("\n# Step 2: removing long branches... #\n" +
		     "\neps = %2f\n\n", eps)
  }
#+end_src

#+begin_export latex
We create a DBSCAN clusterer. In the \texttt{clusters} package logic,
a clusterer contains the declaration of the clustering method and the
parameters to use.
#+end_export

#+begin_src go <<Create a clusterer>>=
  c, err := clusters.DBSCAN(
	  minpts, eps, 1, clusters.EuclideanDistance)
  if err != nil {
	  panic(err)
  }
#+end_src

#+begin_export latex
We import \texttt{clusters}.
#+end_export

#+begin_src go <<Imports>>=
  "github.com/mpraski/clusters"
#+end_src

#+begin_export latex
We apply the created clusterer to the input data using the
\texttt{Learn} method. After this, the results of the DBSCAN
clustering can be returned. To show the cluster sizes, we use
\texttt{Sizes}. To return the cluster mappings (i.e. which values were
attributed to which clusters), we use the \texttt{Guesses} method. The
clusters are enumerated starting with \textbf{1} (for the biggest
cluster). Sometimes \texttt{Guesses} returns cluster indices of
\textbf{-1} intended for outlier points (not belonging to any
cluster.\par

\texttt{Sizes} and \texttt{Guesses} are part of the
\texttt{HardCluster} interface, which is used in the \texttt{clusters}
package to actually perform the analysis using a clusterer.\par

We print the clustering results if the \texttt{-verbose} flag is used.
#+end_export

#+begin_src go <<Find clusters>>=
  if err = c.Learn(data); err != nil {
	  panic(err)
  }

  if *optVerbose {
	  fmt.Printf(
		  "The branches were set into %d clusters:\n\n",
		  len(c.Sizes()))
	    // print the table of cluster sizes
	  fmt.Printf("Cluster id\tCluster size\n")
	  for i, n := range c.Sizes() {
		  fmt.Printf("%d\t\t%d\n",
			  i+1, n)
	  }
	    // print the table of cluster mappings
	  fmt.Printf("\nBranch length\tCluster id\n")
	  for i, n := range c.Guesses() {
		  if n == -1 {
			  fmt.Printf(
				  "%2f\toutlier\n",
				  data[i][1])
		  } else {
			  fmt.Printf(
				  "%2f\t%-3d\n",
				  data[i][1], n)
		  }
	  }
  }
#+end_src

#+begin_export latex
To find the threshold branch length, we take the biggest value from
the biggest cluster. We assume that the biggest cluster contains the
smallest branch lengths. Since the lengths are sorted in the ascending
order, we deduce that the first cluster begins at \texttt{data[0][1]}
and ends at \texttt{data[n-1][1]}, where \texttt{n} is the size of the
first cluster that is returned with the \texttt{Sizes} method. So,
\texttt{data[n-1][1]} is the biggest value in the cluster. We return
this value.\par

We print the threshold value if the \texttt{-verbose} flag is used.
#+end_export

#+begin_src go <<Retrieve the threshold>>=
  thresholdLen := data[c.Sizes()[0] - 1][1]

  if *optVerbose {
	  fmt.Printf(
		  "\nThreshold branch length = %2f\n", thresholdLen)
  }
#+end_src

#+begin_export latex
We use the iterative voting again, but this time with the different
rules.  Now voters are branches, which lengths are below the
threshold.
#+end_export

#+begin_src go <<The voting (branches)>>=
  rChild = cRoot.Child
  lChild = rChild.Sib
  for !thresholdFound {
	  //<<Reset the previous results (branches)>>
	  //<<Get branch lengths>>
	  //<<Count votes (branches)>>
	  //<<Choose winner (branches)>>
	  if *optVerbose {
		  //<<Print the results of the round (branches)>>
	  }
	  round++
	  tr = isInFloat(losLengths, thresholdLen)
	  tl = isInFloat(losLengths, thresholdLen)
	  thresholdFound = tr || tl
  }
  cRoot = cRoot.Parent
#+end_src

#+begin_export latex
We declare \texttt{thresholdFound}, \texttt{tl}, \texttt{tr}.
#+end_export

#+begin_src go <<Auxillary variables>>=
  var thresholdFound, tr, tl bool
#+end_src

#+begin_export latex
In the beginning of each round, set the number of votes to zero and
reset the branch length slices.
#+end_export

#+begin_src go <<Reset the previous results (branches)>>=
  rVotes, lVotes = 0, 0
  rbLengths, lbLengths = nil, nil
#+end_src

#+begin_export latex
We apply \texttt{getBranchLengths} to the children of the current root
to get slices of the leaf labels. If a child is a terminal node, we
simply get the length of its branch without calling the function.
#+end_export

#+begin_src go <<Get branch lengths>>=
    // the right child
  if rChild.Child == nil {
	  rbLengths = append(rbLengths, rChild.Length)
    } else {
	  rbLengths = getBranchLengths(rChild.Child, rbLengths)
    }
    // the left child
  if lChild.Child == nil {
	  lbLengths = append(lbLengths, lChild.Length)
    } else {
	  lbLengths = getBranchLengths(lChild.Child, lbLengths)
    }
#+end_src

#+begin_export latex
We declare \texttt{rbLengths} and \texttt{lbLengths}.
#+end_export

#+begin_src go <<Auxillary variables>>=
  var rbLengths, lbLengths []float64
#+end_src

#+begin_export latex
We count votes.
#+end_export

#+begin_src go <<Count votes (branches)>>=
  rVotes = countVotes(rbLengths, thresholdLen)
  lVotes = countVotes(lbLengths, thresholdLen)
#+end_src

#+begin_export latex
We choose the winning clade.
#+end_export

#+begin_src go <<Choose winner (branches)>>=
  if rVotes > lVotes {
	  cRoot = rChild
	  losVotes = lVotes
	  losLengths = lbLengths
	  winVotes = rVotes
	  rChild = cRoot.Child
	  lChild = rChild.Sib
  } else {
	  cRoot = lChild
	  losVotes = rVotes
	  losLengths = rbLengths
	  winVotes = lVotes
	  rChild = cRoot.Child
	  lChild = rChild.Sib
  }
#+end_src

#+begin_export latex
We declare \texttt{losLengths}.
#+end_export

#+begin_src go <<Auxillary variables>>=
  var losLengths []float64
#+end_src

#+begin_export latex
We declare a function for checking if a float is present in a slice
of floats.
#+end_export

#+begin_src go <<Functions>>=
  func isInFloat(slice []float64, value float64) bool {
	  for _, x := range slice {
		  if x == value {
			  return true
		  }
	  }
	  return false
  }
#+end_src


#+begin_export latex
We print the results of the current voting round.
#+end_export

#+begin_src go <<Print the results of the round (branches)>>=
  fmt.Printf(
	  "round: %d\twinner: %s\tvotes: %d\n",
	  round, cRoot.Label, winVotes)
#+end_src

#+begin_export latex
When the iterative voting is over, we print the resulting tree. If the
\texttt{-c} flag is used, we print the summary of the run.
#+end_export

#+begin_src go <<Print the target clade (branches)>>=
  if *optVerbose {
	  //<<Print the voting results (branches)>>
  }
  fmt.Printf("(%s;\n", cRoot.String()[1:])
#+end_src

#+begin_export latex
We inform the user that the voting is finished.
#+end_export

#+begin_src go <<Print the voting results (branches)>>=
  fmt.Printf("final:\t\tthe threshold branch length reached\n" +
	  "final:\t\treturn to the parent node (%s)\n",
	  cRoot.Label)

  fmt.Printf("\nThe target clade:\n\n")
#+end_src
